syntax = "proto3";
package mudchain.customtransfer;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "customtransfer/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/evmos/evmos/v6/x/customtransfer/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mudchain/customtransfer/params";
  }
  // this line is used by starport scaffolding # 2
    // Queries a DenomTrace by index.
	rpc DenomTrace(QueryGetDenomTraceRequest) returns (QueryGetDenomTraceResponse) {
		option (google.api.http).get = "/mudchain/customtransfer/denom_trace/{index}";
	}

	// Queries a list of DenomTrace items.
	rpc DenomTraceAll(QueryAllDenomTraceRequest) returns (QueryAllDenomTraceResponse) {
		option (google.api.http).get = "/mudchain/customtransfer/denom_trace";
	}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
message QueryGetDenomTraceRequest {
  string index = 1;

}

message QueryGetDenomTraceResponse {
DenomTrace denomTrace = 1 [(gogoproto.nullable) = false];
}

message QueryAllDenomTraceRequest {
cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDenomTraceResponse {
repeated DenomTrace denomTrace = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}